//
// Created by Harold on 2024/12/22.
//

#include <fstream>
#include <string>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <numeric>
#include <iostream>

#include "../utils/str_op.h"
#include "../utils/debug.h"

size_t mix(size_t value, size_t secret_number)
{
    return value ^ secret_number;
}

size_t prune(size_t secret_number)
{
    return secret_number % 16777216;
}

size_t next(size_t secret_number)
{
    secret_number = prune(mix(secret_number * 64, secret_number));
    secret_number = prune(mix(secret_number / 32, secret_number));
    return prune(mix(secret_number * 2048, secret_number));
}

size_t part_1(char const* fn)
{
    std::ifstream ifs(fn);
    std::string line;

    size_t sum = 0;
    while (std::getline(ifs, line))
    {
        auto init = parse_num<size_t>(line);
        for (auto i = 0; i < 2000; i++)
            init = next(init);
        sum += init;
    }
    return sum;
}

int part_2(char const* fn)
{
    std::ifstream ifs(fn);
    std::string line;

    std::vector<int> prices, changes;
    prices.reserve(2001);
    changes.reserve(2001);
    std::unordered_map<std::string, int> global_changes_prices_mapping;
    std::unordered_set<std::string> local_changes;
    std::string seq;
    seq.reserve(8);
    while (std::getline(ifs, line))
    {
        prices.clear();
        changes.clear();
        local_changes.clear();
        auto init = parse_num<size_t>(line);
        prices.push_back(init % 10);
        for (auto i = 0; i < 2000; i++)
        {
            init = next(init);
            prices.push_back(init % 10);
        }
        changes.resize(prices.size());
        std::adjacent_difference(prices.begin(), prices.end(), changes.begin());
        changes[0] = 0;
        //std::cout << changes << '\n';

        for (auto i = 0; i < changes.size() - 3; i++)
        {
            seq.clear();
            for (auto j = 0; j < 4; j++)
                seq += std::to_string(changes[i + j]);
            auto cur_price = prices[i + 3];
            // first occur
            if (local_changes.find(seq) == local_changes.end())
            {
                local_changes.insert(seq);
                global_changes_prices_mapping[seq] += cur_price;
            }
        }
    }

    return std::max_element(global_changes_prices_mapping.cbegin(), global_changes_prices_mapping.cend(),
                            [](auto const& kv1, auto const& kv2) { return kv1.second < kv2.second; })
        ->second;
}

int main(int argc, char* argv[])
{
    std::cout << "What is the sum of the 2000th secret number generated by each buyer?\n"
              << part_1(argv[1]) << std::endl;
    std::cout << "What is the most bananas you can get?\n" << part_2(argv[1]) << std::endl;

    return 0;
}